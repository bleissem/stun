using BBuffer;
using NUnit.Framework;
using System;
using System.Diagnostics;

namespace STUN.Message {
	[TestFixture]
	public class STUNMessageParserBenchmark {
		[Test]
		public void ParserStunBenchmark() {
			ByteBuffer b = new ByteBuffer(new byte[] {
				0x00, 0x01, 0x00, 0x2C, 0x21, 0x12, 0xA4, 0x42, 0x0A, 0x14, 0x1E, 0x28, 0x32, 0x3C, 0x46, 0x50,
				0x5A, 0x64, 0x6E, 0x78, 0x00, 0x06, 0x00, 0x03, 0x61, 0x3A, 0x62, 0x00, 0x00, 0x24, 0x00, 0x04,
				0x6E, 0x7F, 0x1E, 0xFF, 0x00, 0x25, 0x00, 0x00, 0x00, 0x08, 0x00, 0x14, 0xF5, 0xC6, 0x0F, 0x17,
				0xF5, 0xBB, 0xC0, 0x2D, 0xA6, 0xDE, 0x64, 0x4B, 0x36, 0xF8, 0xB6, 0xBE, 0x79, 0xA0, 0xA6, 0x16
			});

			Bench("Ok", 100000, 20, (iterations) => {
				for (int i = 0; i < iterations; i++) {
					Assert.IsTrue(new STUNMessageParser(b, false).isValid);
				}
			});
		}

		[Test]
		public void ParserNotStunBenchmark() {
			ByteBuffer b = new ByteBuffer(new byte[] {
				0x05, 0x01, 0x00, 0x2C, 0x21, 0x12, 0xA4, 0x42, 0x0A, 0x14, 0x1E, 0x28, 0x32, 0x3C, 0x46, 0x50,
				0x5A, 0x64, 0x6E, 0x78, 0x00, 0x06, 0x00, 0x03, 0x61, 0x3A, 0x62, 0x00, 0x00, 0x24, 0x00, 0x04,
				0x6E, 0x7F, 0x1E, 0xFF, 0x00, 0x25, 0x00, 0x00, 0x00, 0x08, 0x00, 0x14, 0xF5, 0xC6, 0x0F, 0x17,
				0xF5, 0xBB, 0xC0, 0x2D, 0xA6, 0xDE, 0x64, 0x4B, 0x36, 0xF8, 0xB6, 0xBE, 0x79, 0xA0, 0xA6, 0x16
			});
			Bench("Fail 1", 100000, 20, (iterations) => {
				for (int i = 0; i < iterations; i++) {
					Assert.IsFalse(STUNMessageParser.IsValidSTUN(b));
				}
			});


			b = new ByteBuffer(new byte[] {
				0x00, 0x01, 0x00, 0x2C, 0x21, 0x12, 0xA5, 0x42, 0x0A, 0x15, 0x1E, 0x28, 0x32, 0x3C, 0x46, 0x50,
				0x5A, 0x64, 0x6E, 0x78, 0x00, 0x06, 0x00, 0x03, 0x61, 0x3A, 0x62, 0x00, 0x00, 0x24, 0x00, 0x04,
				0x6E, 0x7F, 0x1E, 0xFF, 0x00, 0x25, 0x00, 0x00, 0x00, 0x08, 0x00, 0x14, 0xF5, 0xC6, 0x0F, 0x17,
				0xF5, 0xBB, 0xC0, 0x2D, 0xA6, 0xDE, 0x64, 0x4B, 0x36, 0xF8, 0xB6, 0xBE, 0x79, 0xA0, 0xA6, 0x16
			});
			Bench("Fail 2", 100000, 20, (iterations) => {
				for (int i = 0; i < iterations; i++) {
					Assert.IsFalse(STUNMessageParser.IsValidSTUN(b));
				}
			});


			b = new ByteBuffer(new byte[] {
				0x00, 0x01, 0x00, 0x2C, 0x21, 0x12, 0xA4, 0x42, 0x0A, 0x14, 0x1E, 0x28, 0x32, 0x3C, 0x46, 0x50,
				0x5A, 0x64, 0x6E, 0x78, 0x00, 0x06, 0x00, 0x03, 0x61, 0x3A, 0x62, 0x00, 0x00, 0x24, 0x00, 0x04,
				0x6E, 0x7F, 0x1E, 0xFF, 0x00, 0x25, 0x00, 0x00, 0x00, 0x08, 0x00, 0x14, 0xF5, 0xC6, 0x0F, 0x17,
				0xF5, 0xBB, 0xC0, 0x2D, 0xA6, 0xDE, 0x64, 0x4B, 0x36, 0xF8, 0xB6, 0xBE, 0x79, 0xA0, 0xA6
			});
			Bench("Fail 3", 100000, 20, (iterations) => {
				for (int i = 0; i < iterations; i++) {
					Assert.IsFalse(STUNMessageParser.IsValidSTUN(b));
				}
			});


			b = new ByteBuffer(new byte[] {
				0x00, 0x01, 0x00, 0x2C, 0x21, 0x12
			});
			Bench("Fail 4", 100000, 20, (iterations) => {
				for (int i = 0; i < iterations; i++) {
					Assert.IsFalse(STUNMessageParser.IsValidSTUN(b));
				}
			});
		}

		public delegate void BenchMethod(int iterationsForMethod);
		public void Bench(string name, int iterations, int timesMethodIterated, BenchMethod method) {
			method(iterations); // Warm up
			var s = Stopwatch.StartNew();
			for (int i = 0; i < timesMethodIterated; i++) {
				method(iterations);
			}
			Console.WriteLine(name + ": " + (s.Elapsed.TotalMilliseconds / iterations / timesMethodIterated) * 1000000 + " ns");
		}
	}
}
